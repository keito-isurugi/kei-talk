/**
 * src/data/explanations/lcm-basic-explanation.ts
 *
 * 最小公倍数（LCM）の解説データ
 * GCDとの関係性と数学的性質の学習向け
 */

import type { ExplanationData } from "@/types/algorithm";

/**
 * 最小公倍数（LCM）の解説データ
 * 基本概念からGCDとの関係、効率的な実装まで段階的に説明
 */
export const lcmBasicExplanation: ExplanationData = {
	calculationType: "lcm_basic",
	title: "最小公倍数（LCM）アルゴリズムとは？",
	overview:
		"最小公倍数（LCM）は、2つ以上の整数の公倍数のうち最小の正の整数です。GCD（最大公約数）を利用することで効率的に計算でき、分数の通分、周期的現象の同期、プログラミングでの配列サイズ調整など様々な場面で活用されます。数学的関係「LCM(a,b) × GCD(a,b) = a × b」を理解することで、計算効率を大幅に改善できます。",

	sections: [
		{
			id: "problem-definition",
			title: "🎯 最小公倍数の定義",
			content:
				"最小公倍数（Least Common Multiple, LCM）は、与えられた2つ以上の整数のすべての倍数である正の整数のうち、最小のものです。例えば、12と8の公倍数は24, 48, 72, ...ですが、この中で最小の24がLCM(12,8)となります。LCMは分数の計算、周期的現象の分析、プログラミングでのデータ構造の最適化など、数学と情報科学の多くの分野で重要な役割を果たします。",
			importance: "high",
			examples: [
				"LCM(12, 8) = 24 （12の倍数: 12,24,36... と 8の倍数: 8,16,24... の最小共通値）",
				"LCM(6, 4) = 12 （6の倍数: 6,12,18... と 4の倍数: 4,8,12... の最小共通値）",
				"LCM(17, 13) = 221 （互いに素な数の場合、積と等しい）",
				"LCM(7, 21) = 21 （一方が他方の倍数の場合、大きい方と等しい）",
			],
		},

		{
			id: "mathematical-relationship",
			title: "🔗 GCDとの数学的関係",
			content:
				"LCMとGCD（最大公約数）の間には重要な数学的関係があります：LCM(a,b) × GCD(a,b) = a × b。この関係により、GCDを効率的に求めるユークリッドの互除法を利用して、LCMも効率的に計算できます。つまり、LCM(a,b) = (a × b) / GCD(a,b)として計算できるため、時間計算量はGCDと同じO(log n)となります。",
			importance: "high",
			formula:
				"LCM(a,b) × GCD(a,b) = a × b<br><br>したがって：<br>LCM(a,b) = (a × b) / GCD(a,b)<br><br>例：LCM(12,8) = (12×8) / GCD(12,8) = 96 / 4 = 24",
			examples: [
				"12と8: LCM(12,8) × GCD(12,8) = 24 × 4 = 96 = 12 × 8",
				"15と25: LCM(15,25) × GCD(15,25) = 75 × 5 = 375 = 15 × 25",
				"7と11: LCM(7,11) × GCD(7,11) = 77 × 1 = 77 = 7 × 11",
				"この関係は任意の正の整数ペアで成立",
			],
		},

		{
			id: "efficient-algorithm",
			title: "⚡ 効率的なアルゴリズム",
			content:
				"LCMの計算は、素朴な方法（両方の倍数を順番に調べる）では時間がかかりますが、GCDとの関係を利用すると効率的になります。ユークリッドの互除法でGCDを求め、その結果を使ってLCMを計算します。この方法の時間計算量はO(log n)で、大きな数でも高速に計算できます。また、オーバーフロー対策として、除算を先に行う実装も重要です。",
			importance: "high",
			examples: [
				"素朴な方法: O(min(a,b)) - 大きな数では非実用的",
				"GCD利用: O(log n) - 効率的で実用的",
				"LCM(1000000, 999999) も瞬時に計算可能",
				"暗号などの大きな数でも適用可能",
			],
		},

		{
			id: "implementation-considerations",
			title: "💻 実装上の考慮点",
			content:
				"LCMの実装では、オーバーフローに注意が必要です。a × b を先に計算すると、結果は収まってもその中間結果がオーバーフローする可能性があります。これを避けるため、(a / GCD(a,b)) × b の順序で計算するか、BigIntなどの大整数ライブラリを使用します。また、0との最小公倍数は数学的に定義されないため、入力検証も重要です。",
			importance: "medium",
			examples: [
				"オーバーフロー対策: (a / gcd) × b の順序",
				"入力検証: 0や負数のチェック",
				"BigInt使用: 任意精度での計算",
				"型安全性: TypeScriptでの型ガード",
			],
		},

		{
			id: "multiple-numbers",
			title: "🔢 複数の数のLCM",
			content:
				"3つ以上の数のLCMは、2つずつ順番に計算することで求められます。LCM(a,b,c) = LCM(LCM(a,b),c) のように、結合法則が成り立ちます。配列の場合、reduceメソッドを使って効率的に実装できます。計算順序は結果に影響しませんが、途中でオーバーフローが起きにくい順序を選ぶことが実用上重要です。",
			importance: "medium",
			examples: [
				"LCM(4,6,8) = LCM(LCM(4,6),8) = LCM(12,8) = 24",
				"LCM(2,3,5,7) = 210 （すべて素数の場合は積と等しい）",
				"JavaScript: numbers.reduce((acc, num) => lcm(acc, num))",
				"計算順序の最適化で中間オーバーフローを回避",
			],
		},

		{
			id: "real-world-applications",
			title: "🌍 実世界での応用",
			content:
				"LCMは様々な実用的場面で活用されます。分数の通分では、分母のLCMを共通分母として使用します。音楽では異なるリズムパターンの同期に使われ、プログラミングでは配列のサイズ調整や周期的タスクのスケジューリングに応用されます。また、信号処理では異なるサンプリング周波数の同期や、データベースでのバッチ処理の最適化にも使用されます。",
			importance: "low",
			examples: [
				"分数の通分: 1/4 + 1/6 → 3/12 + 2/12 = 5/12",
				"音楽: 4拍子と3拍子の同期 → 12拍で一致",
				"プログラミング: 配列のチャンクサイズ最適化",
				"タスクスケジューリング: 異なる周期の同期実行",
			],
		},

		{
			id: "mathematical-properties",
			title: "📐 数学的性質",
			content:
				"LCMには多くの重要な数学的性質があります。交換法則（LCM(a,b) = LCM(b,a)）、結合法則（LCM(a,LCM(b,c)) = LCM(LCM(a,b),c)）が成り立ちます。また、LCM(a,b) ≥ max(a,b)で、等号は一方が他方の倍数の場合に成立します。互いに素な数の場合、LCMは積と等しくなります。これらの性質を理解することで、計算の最適化や結果の検証に活用できます。",
			importance: "medium",
			examples: [
				"交換法則: LCM(12,8) = LCM(8,12) = 24",
				"結合法則: LCM(4,6,8) = LCM(LCM(4,6),8) = LCM(4,LCM(6,8))",
				"境界条件: LCM(a,1) = a, LCM(a,a) = a",
				"互いに素: LCM(7,11) = 77 = 7 × 11",
			],
		},

		{
			id: "comparison-with-gcd",
			title: "⚖️ GCDとの比較",
			content:
				"LCMとGCDは相補的な関係にあります。GCDは最大の共通因数を求める「下向き」の操作で、LCMは最小の共通倍数を求める「上向き」の操作です。両者とも同じユークリッドの互除法を基盤とし、同じ時間計算量O(log n)を持ちます。用途も相補的で、GCDは約分や因数分解に、LCMは通分や同期に使用されます。",
			importance: "low",
			examples: [
				"GCD(12,8) = 4 （最大の共通因数）",
				"LCM(12,8) = 24 （最小の共通倍数）",
				"両者の積: 4 × 24 = 96 = 12 × 8",
				"用途の違い: GCD→約分、LCM→通分",
			],
		},

		{
			id: "learning-progression",
			title: "📚 学習の進め方",
			content:
				"LCMの学習は、まず基本概念と手計算による理解から始めます。次にGCDとの関係を学び、効率的なアルゴリズムを理解します。実装では、基本版から始めてオーバーフロー対策、複数の数への拡張と段階的に進めます。最後に実際の応用例（分数計算、周期問題など）を通じて、理論と実践の橋渡しを行います。",
			importance: "low",
			examples: [
				"基礎: 手計算でLCMの概念理解",
				"理論: GCDとの数学的関係の習得",
				"実装: 効率的アルゴリズムのコーディング",
				"応用: 実世界の問題への適用",
			],
		},
	],
};
